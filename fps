-- // scrambled open src cuz im too lazy to obfuscate \\ --
_G.Settings={
Players={
["Ignore Me"]=true,
["Ignore Others"]=true
},
Meshes={
Destroy=false,
LowDetail=true
},
Images={
Invisible=true,
LowDetail=false,
Destroy=false,
},
["No Particles"]=true,
["No Camera Effects"]=true,
["No Explosions"]=true,
["No Clothes"]=true,
["Low Water Graphics"]=true,
["No Shadows"]=true,
["Low Rendering"]=true,
["Low Quality Parts"]=true
}
loadstring(game:HttpGet"https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua")()
local a=loadstring(game:HttpGet"https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua")()
if not _G.Ignore then
_G.Ignore={}
end
if not _G.WaitPerAmount then
_G.WaitPerAmount=500
end
if _G.SendNotifications==nil then
_G.SendNotifications=true
end
if _G.ConsoleLogs==nil then
_G.ConsoleLogs=false
end



if not game:IsLoaded()then
repeat
task.wait()
until game:IsLoaded()
end
if not _G.Settings then
_G.Settings={
Players={
["Ignore Me"]=true,
["Ignore Others"]=true,
["Ignore Tools"]=true
},
Meshes={
NoMesh=false,
NoTexture=false,
Destroy=false
},
Images={
Invisible=true,
Destroy=false
},
Explosions={
Smaller=true,
Invisible=false,
Destroy=false
},
Particles={
Invisible=true,
Destroy=false
},
TextLabels={
LowerQuality=false,
Invisible=false,
Destroy=false
},
MeshParts={
LowerQuality=true,
Invisible=false,
NoTexture=false,
NoMesh=false,
Destroy=false
},
Other={
["FPS Cap"]=240,
["No Camera Effects"]=true,
["No Clothes"]=true,
["Low Water Graphics"]=true,
["No Shadows"]=true,
["Low Rendering"]=true,
["Low Quality Parts"]=true,
["Low Quality Models"]=true,
["Reset Materials"]=true,
["Lower Quality MeshParts"]=true
}
}
end
local b,c,d,e=game:GetService"Players",game:GetService"Lighting",game:GetService"StarterGui",game:GetService"MaterialService"
local f,g=b.LocalPlayer,{"ParticleEmitter","Trail","Smoke","Fire","Sparkles"}
local function PartOfCharacter(h)
for i,j in pairs(b:GetPlayers())do
if j~=f and j.Character and h:IsDescendantOf(j.Character)then
return true
end
end
return false
end
local function DescendantOfIgnore(h)
for i,j in pairs(_G.Ignore)do
if h:IsDescendantOf(j)then
return true
end
end
return false
end
local function CheckIfBad(h)
if not h:IsDescendantOf(b)and(_G.Settings.Players["Ignore Others"]and not PartOfCharacter(h)or not _G.Settings.Players["Ignore Others"])and(_G.Settings.Players["Ignore Me"]and f.Character and not h:IsDescendantOf(f.Character)or not _G.Settings.Players["Ignore Me"])and(_G.Settings.Players["Ignore Tools"]and not h:IsA"BackpackItem"and not h:FindFirstAncestorWhichIsA"BackpackItem"or not _G.Settings.Players["Ignore Tools"])and(_G.Ignore and not table.find(_G.Ignore,h)and not DescendantOfIgnore(h)or(not _G.Ignore or type(_G.Ignore)~="table"or#_G.Ignore<=0))then
if h:IsA"DataModelMesh"then
if _G.Settings.Meshes.NoMesh and h:IsA"SpecialMesh"then
h.MeshId=""
end
if _G.Settings.Meshes.NoTexture and h:IsA"SpecialMesh"then
h.TextureId=""
end
if _G.Settings.Meshes.Destroy or _G.Settings["No Meshes"]then
h:Destroy()
end
elseif h:IsA"FaceInstance"then
if _G.Settings.Images.Invisible then
h.Transparency=1
h.Shiny=1
end
if _G.Settings.Images.LowDetail then
h.Shiny=1
end
if _G.Settings.Images.Destroy then
h:Destroy()
end
elseif h:IsA"ShirtGraphic"then
if _G.Settings.Images.Invisible then
h.Graphic=""
end
if _G.Settings.Images.Destroy then
h:Destroy()
end
elseif table.find(g,h.ClassName)then
if _G.Settings["Invisible Particles"]or _G.Settings["No Particles"]or(_G.Settings.Other and _G.Settings.Other["Invisible Particles"])or(_G.Settings.Particles and _G.Settings.Particles.Invisible)then
h.Enabled=false
end
if(_G.Settings.Other and _G.Settings.Other["No Particles"])or(_G.Settings.Particles and _G.Settings.Particles.Destroy)then
h:Destroy()
end
elseif h:IsA"PostEffect"and(_G.Settings["No Camera Effects"]or(_G.Settings.Other and _G.Settings.Other["No Camera Effects"]))then
h.Enabled=false
elseif h:IsA"Explosion"then
if _G.Settings["Smaller Explosions"]or(_G.Settings.Other and _G.Settings.Other["Smaller Explosions"])or(_G.Settings.Explosions and _G.Settings.Explosions.Smaller)then
h.BlastPressure=1
h.BlastRadius=1
end
if _G.Settings["Invisible Explosions"]or(_G.Settings.Other and _G.Settings.Other["Invisible Explosions"])or(_G.Settings.Explosions and _G.Settings.Explosions.Invisible)then
h.BlastPressure=1
h.BlastRadius=1
h.Visible=false
end
if _G.Settings["No Explosions"]or(_G.Settings.Other and _G.Settings.Other["No Explosions"])or(_G.Settings.Explosions and _G.Settings.Explosions.Destroy)then
h:Destroy()
end
elseif h:IsA"Clothing"or h:IsA"SurfaceAppearance"or h:IsA"BaseWrap"then
if _G.Settings["No Clothes"]or(_G.Settings.Other and _G.Settings.Other["No Clothes"])then
h:Destroy()
end
elseif h:IsA"BasePart"and not h:IsA"MeshPart"then
if _G.Settings["Low Quality Parts"]or(_G.Settings.Other and _G.Settings.Other["Low Quality Parts"])then
h.Material=Enum.Material.Plastic
h.Reflectance=0
end
elseif h:IsA"TextLabel"and h:IsDescendantOf(workspace)then
if _G.Settings["Lower Quality TextLabels"]or(_G.Settings.Other and _G.Settings.Other["Lower Quality TextLabels"])or(_G.Settings.TextLabels and _G.Settings.TextLabels.LowerQuality)then
h.Font=Enum.Font.SourceSans
h.TextScaled=false
h.RichText=false
h.TextSize=14
end
if _G.Settings["Invisible TextLabels"]or(_G.Settings.Other and _G.Settings.Other["Invisible TextLabels"])or(_G.Settings.TextLabels and _G.Settings.TextLabels.Invisible)then
h.Visible=false
end
if _G.Settings["No TextLabels"]or(_G.Settings.Other and _G.Settings.Other["No TextLabels"])or(_G.Settings.TextLabels and _G.Settings.TextLabels.Destroy)then
h:Destroy()
end
elseif h:IsA"Model"then
if _G.Settings["Low Quality Models"]or(_G.Settings.Other and _G.Settings.Other["Low Quality Models"])then
h.LevelOfDetail=1
end
elseif h:IsA"MeshPart"then
if _G.Settings["Low Quality MeshParts"]or(_G.Settings.Other and _G.Settings.Other["Low Quality MeshParts"])or(_G.Settings.MeshParts and _G.Settings.MeshParts.LowerQuality)then
h.RenderFidelity=2
h.Reflectance=0
h.Material=Enum.Material.Plastic
end
if _G.Settings["Invisible MeshParts"]or(_G.Settings.Other and _G.Settings.Other["Invisible MeshParts"])or(_G.Settings.MeshParts and _G.Settings.MeshParts.Invisible)then
h.Transparency=1
h.RenderFidelity=2
h.Reflectance=0
h.Material=Enum.Material.Plastic
end
if _G.Settings.MeshParts and _G.Settings.MeshParts.NoTexture then
h.TextureID=""
end
if _G.Settings.MeshParts and _G.Settings.MeshParts.NoMesh then
h.MeshId=""
end
if _G.Settings["No MeshParts"]or(_G.Settings.Other and _G.Settings.Other["No MeshParts"])or(_G.Settings.MeshParts and _G.Settings.MeshParts.Destroy)then
h:Destroy()
end
end
end
end
if _G.SendNotifications then
a:Notify(
{Title="Voidx",Description="Executed! Boosting FPS"},
{OutlineColor=Color3.fromRGB(80,80,80),Time=5,Type="image"},
{Image="http://www.roblox.com/asset/?id=6023426923",ImageColor=Color3.fromRGB(255,84,84)}
)
end
coroutine.wrap(pcall)(function()
if(_G.Settings["Low Water Graphics"]or(_G.Settings.Other and _G.Settings.Other["Low Water Graphics"]))then
if not workspace:FindFirstChildOfClass"Terrain"then
repeat
task.wait()
until workspace:FindFirstChildOfClass"Terrain"
end
workspace:FindFirstChildOfClass"Terrain".WaterWaveSize=0
workspace:FindFirstChildOfClass"Terrain".WaterWaveSpeed=0
workspace:FindFirstChildOfClass"Terrain".WaterReflectance=0
workspace:FindFirstChildOfClass"Terrain".WaterTransparency=0
if sethiddenproperty then
sethiddenproperty(workspace:FindFirstChildOfClass"Terrain","Decoration",false)
else
a:Notify(
{Title="Voidx",Description="Your Executor Does Not Support This Part Of The Script, Try Another Executor And Try Again!"},
{OutlineColor=Color3.fromRGB(80,80,80),Time=5,Type="image"},
{Image="http://www.roblox.com/asset/?id=6023426923",ImageColor=Color3.fromRGB(255,84,84)}
)
warn"Your exploit does not support sethiddenproperty, please use a different exploit."
end
if _G.SendNotifications then
d:SetCore("SendNotification",{
Title="Voidx",
Text="Low Water Graphics Enabled",
Duration=5,
Button1="Okay"
})
end
if _G.ConsoleLogs then
warn"Low Water Graphics Enabled"
end
end
end)
coroutine.wrap(pcall)(function()
if _G.Settings["No Shadows"]or(_G.Settings.Other and _G.Settings.Other["No Shadows"])then
c.GlobalShadows=false
c.FogEnd=9e9
c.ShadowSoftness=0
if sethiddenproperty then
sethiddenproperty(c,"Technology",2)
else
d:SetCore("SendNotification",{
Title="Voidx",
Text="Your exploit does not support sethiddenproperty, please use a different exploit.",
Duration=5,
Button1="Okay"
})
warn"Your exploit does not support sethiddenproperty, please use a different exploit."
end
if _G.SendNotifications then
d:SetCore("SendNotification",{
Title="Voidx",
Text="No Shadows Enabled",
Duration=5,
Button1="Okay"
})
end
if _G.ConsoleLogs then
warn"No Shadows Enabled"
end
end
end)
coroutine.wrap(pcall)(function()
if _G.Settings["Low Rendering"]or(_G.Settings.Other and _G.Settings.Other["Low Rendering"])then
settings().Rendering.QualityLevel=1
settings().Rendering.MeshPartDetailLevel=Enum.MeshPartDetailLevel.Level04
if _G.SendNotifications then
d:SetCore("SendNotification",{
Title="Voidx",
Text="Low Rendering Enabled",
Duration=5,
Button1="Okay"
})
end
if _G.ConsoleLogs then
warn"Low Rendering Enabled"
end
end
end)
coroutine.wrap(pcall)(function()
if _G.Settings["Reset Materials"]or(_G.Settings.Other and _G.Settings.Other["Reset Materials"])then
for h,i in pairs(e:GetChildren())do
i:Destroy()
end
e.Use2022Materials=false
if _G.SendNotifications then
d:SetCore("SendNotification",{
Title="Voidx",
Text="Reset Materials Enabled",
Duration=5,
Button1="Okay"
})
end
if _G.ConsoleLogs then
warn"Reset Materials Enabled"
end
end
end)
coroutine.wrap(pcall)(function()
if _G.Settings["FPS Cap"]or(_G.Settings.Other and _G.Settings.Other["FPS Cap"])then
if setfpscap then
if type(_G.Settings["FPS Cap"]or(_G.Settings.Other and _G.Settings.Other["FPS Cap"]))=="string"or type(_G.Settings["FPS Cap"]or(_G.Settings.Other and _G.Settings.Other["FPS Cap"]))=="number"then
setfpscap(tonumber(_G.Settings["FPS Cap"]or(_G.Settings.Other and _G.Settings.Other["FPS Cap"])))
if _G.SendNotifications then
d:SetCore("SendNotification",{
Title="Voidx",
Text="FPS Capped to "..tostring(_G.Settings["FPS Cap"]or(_G.Settings.Other and _G.Settings.Other["FPS Cap"])),
Duration=5,
Button1="Okay"
})
end
if _G.ConsoleLogs then
warn("FPS Capped to "..tostring(_G.Settings["FPS Cap"]or(_G.Settings.Other and _G.Settings.Other["FPS Cap"])))
end
elseif _G.Settings["FPS Cap"]or(_G.Settings.Other and _G.Settings.Other["FPS Cap"])==true then
setfpscap(1e6)
if _G.SendNotifications then
d:SetCore("SendNotification",{
Title="Voidx",
Text="FPS Uncapped",
Duration=5,
Button1="Okay"
})
end
if _G.ConsoleLogs then
warn"FPS Uncapped"
end
end
else
d:SetCore("SendNotification",{
Title="Voidx",
Text="FPS Cap Failed",
Duration=math.huge,
Button1="Okay"
})
warn"FPS Cap Failed"
end
end
end)
game.DescendantAdded:Connect(function(h)
wait(_G.LoadedWait or 1)
CheckIfBad(h)
end)
local h=game:GetDescendants()
local i=_G.WaitPerAmount or 500
local j=_G.WaitPerAmount or 500
if _G.SendNotifications then
d:SetCore("SendNotification",{
Title="Voidx",
Text="Checking "..#h.." Instances...",
Duration=15,
Button1="Okay"
})
end
if _G.ConsoleLogs then
warn("Checking "..#h.." Instances...")
end
for k,l in pairs(h)do
CheckIfBad(l)
if k==j then
task.wait()
if _G.ConsoleLogs then
print("Loaded "..k.."/"..#h)
end
j=j+i
end
end
d:SetCore("SendNotification",{
Title="Voidx",
Text="FPS Booster Loaded!",
Duration=math.huge,
Button1="Okay"
})
warn"FPS Booster Loaded!"
